#!/bin/bash

# yad-splash: meant to be similar as gtkdialog-splash but very simple, by fredx181
# A lot has been stolen from gtkdialog-splash
# Do whatever you want with it
# Depends on yad
# 2017-04-15 added option for gradient background (e.g. --bg_ gradient true)
# It works by 'plucking out' additional parameters from "$@" in the end, which is a bit weird!!
# but that's required for not to conflict with original 'yad' parameters.   
# these all should work normally also

# Remove leftovers from possible previous run first
rm -f /tmp/yad_splash_bg.svg /tmp/gtkrc.yadsplash

# Set the icon-theme, may be required
ICON_THEME="Faenza"

set_gtkrc()
{
# Yad colored-splash
# Set variables for foreground, background, fontname and text.
[ -z "$FOREGROUND" ] && FOREGROUND="#000000"
[ -z "$BACKGROUND" ] && BACKGROUND="#CECECE"
[ -z "$gtk_bg" ] && gtk_bg="bg[NORMAL] = \"$BACKGROUND\""
[ -z "$FONTNAME" ] && FONTNAME="Bold 10"
cat > /tmp/gtkrc.yadsplash <<EOF
gtk-icon-theme-name="$ICON_THEME"
pixmap_path "/tmp"
style "gnome-color-chooser-default"
{
$gtk_bg
#  bg[NORMAL] = "$BACKGROUND"
  fg[NORMAL] = "$FOREGROUND"
 font_name= "$FONTNAME"
	engine "murrine"
	{

	}
}
class "GtkWidget" style "gnome-color-chooser-default"

style "murrine-button" = "murrine-wider"
{	
	bg[NORMAL]        = mix(0.6, "$BACKGROUND", shade (1.8, "$FOREGROUND")) 
	bg[PRELIGHT]      = mix(0.4, "$BACKGROUND", shade (1.4, "$FOREGROUND"))


  	engine "murrine" 
	{
		contrast			= 0.4
		toolbarstyle		= 2
		lightborder_shade	= 1.0
		roundness           = 3                 # 0 = squared, 1 = old default, more will increase roundness
		gradient_shades     = {1.1,1.0,1.0,0.87}
	}
}
widget_class "*<GtkButton>"      style "murrine-button"
EOF

}
export -f set_gtkrc

helptext="\nyad-splash\n
\n

usage: yad-splash [OPTIONS] [--timeout SEC] --text TEXT \n\n	All yad options can be used (recommended is to add: --undecorated --no-buttons)\n
 	Additional options for colors and fontname: \n  
	--bg COLOR (background color red, blue, yellow... or in heximal e.g. '#5E3232', default: grey)\n
	--fg COLOR (font color red, blue, yellow... or in heximal e.g. '#ffffff', default: black)\n
	--font_name NAME (e.g. 'Sans Bold 13')\n
	--bg_gradient true or false (default: false)\n
	--bg_gradient_height HEIGHT (default: 80) choose higher value for splash message with height of e.g. 300\n
	Example: yad-splash --borders=6 --height=80 --width=200 --center --text='  Yellow Text On Gradient Background  ' --undecorated --button="gtk-close:1" --fg yellow --bg blue --bg_gradient true --bg_gradient_height 150 --font_name 'Sans Bold 10' \n\n"
	
	
params=$@
	
if [ ${#params} -eq 0 ]; then	# no options, no text, so print info/help...
	echo -e $helptext
	exit
fi
dummy="DUMMY"
BACKGROUND=""
FOREGROUND=""
FONTNAME=""
bg_gradient=false
bg_gradient_height=80

param=""
optarg=$dummy


for arg in "$@";
 do
	if [ $optarg == "BG" ]
	then
		BACKGROUND=$arg
		optarg=$dummy
	elif [ $optarg == "FG" ]
	then
		FOREGROUND=$arg
		optarg=$dummy
	elif [ $optarg == "FONT" ]
	then
		FONTNAME=$arg
		optarg=$dummy
	elif [ $optarg == "GR" ]
	then
		bg_gradient=$arg
		optarg=$dummy
	elif [ $optarg == "GRH" ]
	then
		bg_gradient_height=$arg
		optarg=$dummy
	else
		case $arg in
		--bg)
			optarg="BG"
			;;
		--bg_gradient)
			optarg="GR"
			;;
		--bg_gradient_height)
			optarg="GRH"
			;;
		--fg)
			optarg="FG"
			;;
		--font_name)
			optarg="FONT"
			;;
		-help | --help)
			echo -e $helptext
			exit
			;;
		esac
	fi
 done


#set backgound
if [ "$bg_gradient" = "true" ]; then
	#build svg-background image
echo '
<svg version="1.1" width="1000" height="1000" id="svg1">
<defs
id="defs4">
<linearGradient id="LGD_01">
<stop style="stop-color:'$BACKGROUND';stop-opacity:1" offset="0" />
<stop style="stop-color:'$BACKGROUND';stop-opacity:0.1" offset="1" />
</linearGradient>
<linearGradient id="LG_01"
x1="7" y1="'"$bg_gradient_height"'" x2="0" y2="0"	  
xlink:href="#LGD_01"
gradientUnits="userSpaceOnUse" />
</defs>
<rect
style="fill:url(#LG_01);fill-opacity:1;stroke-width:0"
width="1000" height="1000"/>
</svg>' > /tmp/yad_splash_bg.svg #full opacity
gtk_bg='bg_pixmap[NORMAL] = "yad_splash_bg.svg"'
fi


#set -- "${@:1:10}"
#set -- "${@:1:$#}"

if [ "$BACKGROUND" -o "$FOREGROUND" -o "$FONTNAME" ]; then
# Build the /tmp/gtkrc.yadsplash, which is exported later
set_gtkrc
chmod 666 /tmp/gtkrc.yadsplash
fi

echo "Total number of arguments: $#"
echo

# The additional options need to be removed from $@, otherwise conflict may appear
# This can be done safely now since /tmp/gtkrc.yadsplash is created already
echo "Removing additional parameters..., to be safe not to conflict with yad builtin parameters"
cnt="1"
for arg in "$@"
do
shift
#let "cnt+=1"
cnt=$((cnt+1))
if [ "$arg" = "--bg" ]; then
count=$cnt
echo Handling $arg
elif [ "$arg" = "--fg" ]; then
count=$cnt
echo Handling $arg
elif [ "$arg" = "--bg_gradient" ]; then
count=$cnt
echo Handling $arg
elif [ "$arg" = "--bg_gradient_height" ]; then
count=$cnt
echo Handling $arg
elif [ "$arg" = "--font_name" ]; then
count=$cnt

else
count=$((count+1))
   # Parameter after e.g. --bg or e.g --font_name will be removed
   if [ "$count" = "$cnt" ] && [ "${arg:0:2}" != '--' ]; then
   echo Handling $arg
   count=""
   else
   set -- "$@" "$arg"
   fi
fi
done

# For debugging, check if the additional options are indeed removed from $@
#echo "Since the custom gtkrc theme is created already, yad -only- parameters left over:"
#echo @=$@
#printf '%s\n' "$@"
[ -f /tmp/gtkrc.yadsplash ] && export GTK2_RC_FILES="/tmp/gtkrc.yadsplash"
# Execute yad with -yad only- arguments
exec yad "$@"
# rm -f /tmp/yad_splash_bg.svg /tmp/gtkrc.yadsplash

