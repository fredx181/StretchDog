#!/bin/bash

[ "`whoami`" != "root" ] && exec gsu "${0}"

if  [ ! -f /mnt/live/tmp/modules ]; then    # for live-boot
# should be exact, parse from /proc/cmdline
   live_dir=$(grep -o "live-media-path=.*" /proc/cmdline |sed 's: .*::' |sed 's:live-media-path=/::')
   if [[ -z "$live_dir" ]] ; then
      live_dir="live/"
   fi

# get the exact path containing initrd and vmlinuz files for live-boot 3/4. 
test_persistence() {
NUM=$(find /lib/live/mount/persistence -mindepth 1 -maxdepth 1 -not -empty -type d | wc -l)
if [ "$NUM" -gt 2 ]; then
    for i in $(ls -d /lib/live/mount/persistence/* 2> /dev/null); do
    # Create a testfile on / and check if it exists also on the root of the directory '$i'
    # If it does, then this should be the persistence directory
    BASE=$(basename "$i") 
    TESTFILE=$(mktemp --tmpdir=/)  
    [ -n $i ] && [ -f $i/$TESTFILE ] && PERSIST="$i"
    # Define the 'home' partition
    EXCL=$(losetup -a | grep '/live/persistence' | grep -o "$BASE")
    [ -n "$(ls -A $i 2> /dev/null)" ] && [ -z "$EXCL" ] && [ ! -f $i/$TESTFILE ] && MEDIUM="$i"
    rm -f $TESTFILE
    done
else
    for i in $(ls -d /lib/live/mount/persistence/* 2> /dev/null); do
    # Create a testfile on / and check if it exists also on the root of the directory '$i'
    # If it does, then this should be the persistence directory 
    TESTFILE=$(mktemp --tmpdir=/)  
    [ -n $i ] && [ -f $i/$TESTFILE ] && PERSIST="$i"
    # The directory that does not contain the testfile should be the 'home' partition: 
    [ -n "$(ls -A $i 2> /dev/null)" ] && [ ! -f $i/$TESTFILE ] && MEDIUM="$i"
    rm -f $TESTFILE
    done
fi
}
test_persistence

if [ -z "$MEDIUM" ]; then
MEDIUM=$(mount -l | grep -m 1 /lib/live/mount/persistence | awk 'BEGIN{FS=" "} {print $3}')
fi

# still no path for MEDIUM found, booting without persistence?
if [ -z "$MEDIUM" ]; then
   if grep -qv " persistence " /proc/cmdline; then
MEDIUM="/lib/live/mount/medium"
   fi
fi

# remount MEDIUM read-write
mount -o remount,rw $MEDIUM 2> /dev/null

# By default overlay is mounted twice (in case no persistence), unmounting it, sort of 'releases' it, not sure why but it works ;) 
umount /lib/live/mount/overlay 2> /dev/null

export BASE="$MEDIUM/$live_dir"

else    # for porteus-boot
export BASE="$(cat /mnt/live/etc/homedrv)"

fi

devs="$(blkid -o list | grep /dev | grep -E -v "swap|ntfs|vfat" | sort | cut -d" " -f1 | grep -E -v "/loop|sr0|swap" | sed 's|/dev/||g')"
echo $devs
DEVS=`echo $devs | sed 's/ /!/g'`
SETUP=`yad --width=460 --title="Make ISO" --center --text="  \t<b>Make ISO from frugal install</b> \n This script assumes you have booted frugally (not booted from cd)  \n initrd and vmlinuz and filesystem.squashfs style booted \n using something like grub4dos \n Choose where to create new ISO, must be on linux filesystem, \n  NTFS or FAT filesytems are excluded." \
--window-icon="preferences-system" --form  \
--field="  Choose drive to create module on::CB" "$DEVS" \
--field="Type name for the ISO with extension \n(e.g. D-dog-custom.iso):" "" \
--button="gtk-quit:1" --button="gtk-ok:0"`
ret=$?
[[ $ret -ne 0 ]] && exit 0

export DRV="`echo $SETUP | cut -d "|" -f 1`"
export NAME="`echo $SETUP | cut -d "|" -f 2`"

if [ -z "$NAME" ]; then
yad --title="RemasterDog" --center --text=" You probably did not type a name, \n Please try again" --button="gtk-close:0"
exec $0
fi

run_xterm () {
if [ ! -w $BASE ]; then
echo "Sorry, it seems that $BASE is on read-only media, booting from CD maybe?"
echo "Cannot write here, exiting..."
sleep 3
exit
fi

if [[ !  $(ls $BASE | grep "vmlinuz") ]]; then
echo "Sorry, vmlinuz not found, it should be in the same location as the main filesystem.squashfs"
echo "Cannot continue, exiting..."
sleep 3
exit
fi

mkdir "/mnt/$DRV" 2> /dev/null
mount /dev/$DRV /mnt/$DRV 2> /dev/null

# Copy files
echo "Copying files, please wait..."
cp -af /usr/local/isodata /mnt/$DRV/
cp -af $BASE/01-filesystem.squashfs /mnt/$DRV/isodata/live/ 
cp -af $BASE/initrd1.xz /mnt/$DRV/isodata/live/
cp -af $BASE/initrd.img /mnt/$DRV/isodata/live/
cp -af $BASE/vmlinuz1 /mnt/$DRV/isodata/live/
echo
echo
cd /mnt/$DRV

# set variables of: path to data, label and output path of new iso (or leave like this)
NEWISO=isodata
LABEL=ddog
#NAME=DDog-custom.iso

cd "$NEWISO"
echo "Creating ISO, please wait..."
xorriso -as mkisofs -r -J -joliet-long -l -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16 -V "$LABEL" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ../${NAME} ../"$NEWISO"
[ $? -eq 0 ] && echo -e "\e[0;30mSuccess!, ISO: /mnt/$DRV/${NAME} has been created\033[0m" || echo "Sorry, something went wrong" 
rm -fr /mnt/$DRV/isodata
echo
read -s -n 1 -p "Press any key to close . . ."
}
export -f run_xterm

xterm -T "Make ISO" -si -sb -fg white -bg SkyBlue4 -geometry 80x20 -e /bin/bash -c run_xterm


