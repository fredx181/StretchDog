#!/bin/bash
# Create initramfs image
# Author: Tomas M <http://www.linux-live.org/>
# Modified for creating porteus-boot initrd1.xz by fredx181

LAUNCHDIR="$(dirname "$(readlink -f "$0")")"
cd "$LAUNCHDIR"

# Not running from terminal ?
tty -s;
if [ $? -ne 0 ]; then
	msg=" Please run this script from terminal"
	xmessage "`echo -e $msg`"
	exit 0
fi

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
echo "Please run again, e.g. 'sudo ./cr-initrd', exiting now..."
sleep 3
exit
fi

if [ ! -d initramfs ]; then
echo "Directory initramfs not found"
echo "Should be in the same folder as this script, cannot continue, exiting..."
read -s -n 1 -p "Press any key to quit . . ."
echo
exit
fi

OTHER=$(ls /lib/modules | grep -v "$(uname -r)")
if [ "$OTHER" ]; then
echo "Other kernel(s) found in /lib/modules"
echo "Besides the one you're booting with: ($(uname -r)), there is:"
ls /lib/modules | grep -v "$(uname -r)"
read -p "Type or paste the kernel to create initrd1.xz for, or press ENTER for $(uname -r) " choice

case $choice in
  "" )
KERNEL=$(uname -r)
export LMK="lib/modules/$KERNEL"
;;
  $choice )
KERNEL=$choice
export LMK="lib/modules/$KERNEL"
;;
esac
else
KERNEL=$(uname -r)
export LMK="lib/modules/$KERNEL"
fi

if [ ! -d /$LMK ]; then
echo "Directory /$LMK not found, cannot continue, exiting..."
read -s -n 1 -p "Press any key to quit . . ."
echo
exit
fi

echo "Creating initramfs for $KERNEL . . ."

LIVEKITNAME="live"

INITRAMFS=/tmp/$LIVEKITNAME-initramfs-$$

# Check if aufs is included in the kernel, quit if not
AUFSBUILTIN=$(grep "/aufs.ko" /$LMK/modules.builtin 2> /dev/null)
if [ ! -f /$LMK/kernel/fs/aufs/aufs.ko -a -z "$AUFSBUILTIN" ]; then
echo "No aufs found in the kernel, cannot continue, exiting..."
read -s -n 1 -p "Press any key to quit . . ."
echo
exit
fi

# copy file to initramfs tree, including
# all library dependencies (as shown by ldd)
# $1 = file to copy (full path)
copy_including_deps()
{
   # if source doesn't exist or target exists, do nothing
   if [ ! -e "$1" -o -e "$INITRAMFS"/"$1" ]; then
      return
   fi

   cp -R --parents "$1" "$INITRAMFS"
   if [ -L "$1" ]; then
      DIR="$(dirname "$1")"
      LNK="$(readlink "$1")"
      copy_including_deps "$(cd "$DIR"; realpath -s "$LNK")"
   fi

   ldd "$1" 2>/dev/null | sed -r "s/.*=>|[(].*//g" | sed -r "s/^\\s+|\\s+\$//" \
     | while read LIB; do
        copy_including_deps "$LIB"
     done

   for MOD in $(find "$1" -type f | grep .ko); do
      for DEP in $(cat /$LMK/modules.dep | fgrep /$(basename $MOD):); do
         copy_including_deps "/$LMK/$DEP"
      done
   done

   shift
   if [ "$1" != "" ]; then
       copy_including_deps "$@"
   fi
}
export -f copy_including_deps

rm -Rf $INITRAMFS

mkdir -p $INITRAMFS
cp -a initramfs/* $INITRAMFS

mknod $INITRAMFS/dev/console c 5 1
mknod $INITRAMFS/dev/null c 1 3
mknod $INITRAMFS/dev/ram0 b 1 0
mknod $INITRAMFS/dev/tty1 c 4 1
mknod $INITRAMFS/dev/tty2 c 4 2
mknod $INITRAMFS/dev/tty3 c 4 3
mknod $INITRAMFS/dev/tty4 c 4 4

copy_including_deps /$LMK/kernel/fs/aufs
copy_including_deps /$LMK/kernel/fs/ext2
copy_including_deps /$LMK/kernel/fs/ext3
copy_including_deps /$LMK/kernel/fs/ext4
copy_including_deps /$LMK/kernel/fs/fat
copy_including_deps /$LMK/kernel/fs/nls
copy_including_deps /$LMK/kernel/fs/fuse
copy_including_deps /$LMK/kernel/fs/isofs
copy_including_deps /$LMK/kernel/fs/ntfs
copy_including_deps /$LMK/kernel/fs/reiserfs
copy_including_deps /$LMK/kernel/fs/squashfs
#copy_including_deps /$LMK/kernel/crypto

# crc32c is needed for ext4, but I don't know which one, add them all, they are small
find /$LMK/kernel/ | grep crc32c | while read LINE; do
   copy_including_deps $LINE
done

copy_including_deps /$LMK/kernel/drivers/staging/zsmalloc # needed by zram
copy_including_deps /$LMK/kernel/drivers/block/zram
copy_including_deps /$LMK/kernel/drivers/block/loop.*

# usb drivers
copy_including_deps /$LMK/kernel/drivers/usb/storage/usb-storage.*
copy_including_deps /$LMK/kernel/drivers/usb/host
copy_including_deps /$LMK/kernel/drivers/usb/common
copy_including_deps /$LMK/kernel/drivers/usb/core
copy_including_deps /$LMK/kernel/drivers/hid/usbhid
copy_including_deps /$LMK/kernel/drivers/hid/hid.*
copy_including_deps /$LMK/kernel/drivers/hid/uhid.*
copy_including_deps /$LMK/kernel/drivers/hid/hid-generic.*

# disk and cdrom drivers
copy_including_deps /$LMK/kernel/drivers/cdrom
copy_including_deps /$LMK/kernel/drivers/scsi/sr_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sd_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sg.*
copy_including_deps /$LMK/kernel/drivers/ata

copy_including_deps /$LMK/kernel/drivers/staging/zsmalloc # needed by zram
copy_including_deps /$LMK/kernel/drivers/block/zram
copy_including_deps /$LMK/kernel/drivers/block/loop.*


# network support drivers
if [ "$NETWORK" = "true" ]; then
   # add all known ethernet drivers
   copy_including_deps /$LMK/kernel/drivers/net/ethernet
fi

# Copy all from modlist in initramfs directory
while IFS= read line; do
copy_including_deps "/${LMK}$line"
done <<< "$(cat initramfs/modulelist)"

# copy all custom-built modules
copy_including_deps /$LMK/updates

copy_including_deps /$LMK/modules.*


find $INITRAMFS -name "*.ko.gz" -exec gunzip {} \;

# trim modules.order file. Perhaps we could remove it entirely
MODULEORDER="$(cd "$INITRAMFS/$LMK/"; find -name "*.ko" | sed -r "s:^./::g" | tr "\n" "|" | sed -r "s:[.]:.:g")"
cat $INITRAMFS/$LMK/modules.order | sed -r "s/.ko.gz\$/.ko/" | grep -E "$MODULEORDER"/foo/bar > $INITRAMFS/$LMK/_
mv $INITRAMFS/$LMK/_ $INITRAMFS/$LMK/modules.order

depmod -b $INITRAMFS $KERNEL


cd $INITRAMFS
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > /tmp/initrd1.xz
echo /tmp/initrd1.xz

cd ..
#rm -Rf $INITRAMFS
read -s -n 1 -p "Press any key to close . . ."
