#!/bin/bash

if [ -z `which gsu` ]; then
[ "`whoami`" != "root" ] && exec gksu ${0} "$@"
else
[ "`whoami`" != "root" ] && exec gsu ${0} "$@"
fi

install_aufs () {
run_in_term () {
[ "$(uname -m)" = "i686" ] && ARCH=i386
[ "$(uname -m)" = "x86_64" ] && ARCH=amd64

exitfn () {    
trap SIGINT              # Resore signal handling for SIGINT
#rm -f /etc/apt/sources.list.d/sid.list
#apt-get update
touch exit_
exit
}
export -f exitfn

trap "exitfn" 1 2 3 15           # Set up SIGINT trap to call function 'exitfn'.

# add repo for sid and backports
echo -e "deb http://deb.debian.org/debian/ stretch-backports main contrib non-free" > /etc/apt/sources.list.d/bports.list
echo -e "deb http://deb.debian.org/debian/ buster main contrib non-free" > /etc/apt/sources.list.d/buster.list

apt-get update
#wget --no-check-certificate -P /tmp/ -r -e robots=off -N -q -nd -l1 -A "*${ARCH}.deb" https://fredx181.github.io/StretchDog/aufs-dkms/ 2> /dev/null

VER=$(LANG=C apt-cache policy aufs-dkms | grep "Candidate:" | awk '{print $2}' | sed 's/+.*//') 

apt-get install -y dkms -t stretch
apt-get install -y linux-kbuild-$VER -t stretch-backports
mkdir /tmp/tmpapt
apt-get -o dir::cache::archives="/tmp/tmpapt" install -d aufs-dkms -t buster -y
rm -f /etc/apt/sources.list.d/buster.list
apt-get update    # buster.list removed, was only temporary for aufs-dkms, so update package lists again

#for i in $(ls /tmp/aufs-dkms*); do basename $i; done | yad --list --column Package
#dpkg -I aufs-dkms_4.17+20180709-1_i386.deb | for i in $(awk -F', ' '/Depends: /{gsub(/: /, ", "); for (i=2; i<=NF; i++) { gsub(/ .*$/, "", $(i)); printf("%s\n", $(i)); } }'); do dpkg -s $i &> /dev/null || echo $i; done | tr '\n' ' '

#cd /tmp
#CHOICE=$(ls aufs-dkms* | yad --center --title="Choose aufs-dkms package" --height=250 --width=400 --list --column Package)
#[ $? -ne 0 ] && exitfn
#export PKG="`echo $CHOICE | cut -d "|" -f 1`"

cd /tmp/tmpapt
PKG=$(ls aufs-dkms*)
echo aufs-dkms=$PKG
#VER=$(echo "$PKG" | sed 's/+.*//;s/aufs-dkms_//')

if [ "$PKG" ]; then
yad --center --width=500 --text=" Building aufs for kernel version $VER \n Next there will be choice for specific kernel to install \n OK ?"
if [ $? -ne 0 ]; then
touch /exit_
exit
fi
fi

# only unpack aufs, build later
dpkg --unpack "$PKG"

KERNEL=$(apt-cache search linux-image-$VER | grep -v "dbg\|headers\|cloud" | awk '{print $1}' | yad --center --title="Choose kernel to install" --height=250 --width=400 --list --column Kernel)
if [ $? -ne 0 ]; then
touch /exit_
exit
fi

if [ -z "$KERNEL" ]; then
yad --center --text=" Nothing selected \n Please run again and make a selection " --button="gtk-close:0"
touch /exit_
exit
fi
export PKG="`echo $KERNEL | cut -d "|" -f 1`"
HEADERS=$(echo $PKG | sed 's/linux-image/linux-headers/' | sed 's/-unsigned//')

kernel=$(echo $PKG | sed 's/linux-image-//' | sed 's/-unsigned//')

if [ "$kernel" = "$(uname -r)" ]; then
yad --center --width=600 --text="  It seems like you are booting with kernel $kernel already \n  Exiting... " --button="gtk-close:0"
touch /exit_
exit
fi

echo "Installing $PKG and $HEADERS . . ."
apt-get install -t stretch-backports $PKG -d -y
dpkg-deb -x /var/cache/apt/archives/${PKG}* /
depmod $kernel
apt-get install -t stretch-backports $HEADERS -y
apt-get clean

#echo "Kernels found in /lib/modules:"
#ls /lib/modules
#echo
#read -p "Type or paste kernel version to build aufs module for : " kernel

#CHOICE=$(ls /lib/modules | yad --center --title="Choose kernel" --text=" Choose kernel to build aufs module for \n Should be the same as the aufs-dkms version selected ($VER)"  --height=250 --width=470 --list --column Kernel)
#[ $? -ne 0 ] && exitfn
#export kernel="`echo $CHOICE | cut -d "|" -f 1`"

echo kernel=$kernel

#if [ -z "$kernel" ]; then
#yad --center --text=" Nothing selected \n Please run again and make a selection " --button="gtk-close:0"
#exit
#fi

AUFS=$(ls /usr/src | grep aufs | sed 's/aufs-//')

if [ -z "$AUFS" ]; then
yad --center --text=" aufs-dkms is not installed  " --button="gtk-close:0"
echo "aufs-dkms is not installed, exiting . . ."
sleep 5
exitfn
fi

#AUFSVER=$(ls /usr/src | grep aufs | sed 's/+.*//;s/aufs-//')

CHECK=$(echo "$kernel" | grep $VER 2> /dev/null)
if [ "$CHECK" = "" ]; then
yad --center --text="aufs-dkms $VER does not correspond with the kernel you chose " --button="gtk-close:0"
echo "aufs-dkms $VER does not correspond with the kernel you chose, exiting ..."
sleep 5
exitfn
fi

echo "Building aufs . . ."
echo
dkms install -m aufs -v $AUFS -k $kernel
sleep 3

echo "Generating initramfs for $kernel . . ."
rm -fr /var/tmp/mkinitramfs*
CRYPTSETUP=Y mkinitramfs -k -o /dev/null $kernel

INITRAMFS=/tmp/initramfs-$RANDOM
mkdir $INITRAMFS
cp -a /usr/local/cr-initrd-bpo/initramfs/* $INITRAMFS

cp -a /var/tmp/mkinitramfs_*/lib/modules/* $INITRAMFS/lib/modules/

echo "Creating initrd1.xz . . ."
cd $INITRAMFS
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > ../initrd1.xz
echo "Creating initrd.img . . ."
cd /var/tmp/mkinitramfs_*
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > /tmp/initrd.img
rm -fr /var/tmp/mkinitramfs*
echo "Done ! /tmp/initrd1.xz /tmp/initrd.img"
#rm -fr $INITRAMFS
#read -s -n 1 -p "Press any key to close . . ."
sleep 5

exit
}
export -f run_in_term

xterm -T "Build aufs and create initramfs" -si -sb -fg white -bg SkyBlue4 -geometry 80x22 -e /bin/bash -c run_in_term
}
export -f install_aufs

exitfn () {
 #umount -l "$UNION"/tmp 2> /dev/null
umount -l "$UNION"/proc 2> /dev/null
umount -l "$UNION"/dev/pts 2> /dev/null
umount -l "$UNION"/dev 2> /dev/null
umount -l "$UNION"/sys 2> /dev/null
umount -l "$UNION" 2> /dev/null
#umount -l "$CHROOTFS" 2> /dev/null

[ "$?" -ne 0 ] && killall unionfs-fuse 2> /dev/null; echo "Forced unmounting of $UNION"
rmdir "$UNION" 2> /dev/null
rmdir "$UNION" 2> /dev/null
#rmdir "$CHROOTFS" 2> /dev/null
(cd $WRITE) && rm -fr $WRITE
}
export -f exitfn

trap "exitfn" 1 2 3 15           # Set up SIGINT trap to call function 'exitfn'.

LFONT="<span foreground='dark blue'><b>   *** Install Debian Stretch-Backports kernel ***</b></span>"
devs="$(blkid -o list | grep /dev | grep -E -v "swap|ntfs|vfat|crypt" | sort | cut -d" " -f1 | grep -E -v "/loop|sr0|swap" | sed 's|/dev/||g')"
echo $devs
DEVS=`echo $devs | sed 's/ /!/g'`
SETUP=`yad --borders=6  --center --title="upgrade-kernel-bpo"  --text="  $LFONT \n      \t\t\t\t\t(for frugal install) \n Install Stretch-Backports kernel and build aufs kernel module \n This will install some required packages, e.g. aufs-dkms, dkms \n Note: These packages are installed in 'chroot' \n This means that the filesystem will be unaltered \n The final result will be a directory containing: \n initrd.img, initrd1.xz, vmlinuz1 and squashfs module (for the new kernel) \n (which can be copied to the 'live' frugal install folder) " \
--window-icon="preferences-system" --form --columns=1 --width=500 \
--field="   Choose working directory location, must be linux filesystem,\n   NTFS or FAT filesytems are excluded.  :LBL"  "" \
--field="  Choose drive (e.g. sda2), /tmp or /  :CB" "$DEVS!/tmp!/" \
 --button="gtk-quit:1" --button="gtk-ok:0"`

if [ $? -ne 0 ]; then
exit
fi

#export UNION=/mnt/unionsfs_$RANDOM; mkdir -p "$UNION"
export DRV="`echo $SETUP | cut -d "|" -f 2`"

echo $DRV
	if [ "$DRV" = "/tmp" ]; then
WORK="/tmp"
	elif [ "$DRV" = "/" ]; then
WORK="/"
	else
WORK="/mnt/$DRV"
mkdir "/mnt/$DRV" 2> /dev/null
mount /dev/$DRV /mnt/$DRV 2> /dev/null
	fi

# Setup temp directories for mounting
#WORK=/tmp/WORK_$RANDOM; mkdir -p "$WORK"
export UNION=/mnt/unionsfs_$RANDOM; mkdir -p "$UNION"
export WRITE=$WORK/WRITE_$RANDOM; mkdir -p "$WRITE"
#export CHROOTFS=/tmp/chrootfs_$RANDOM; mkdir "$CHROOTFS" 
#mount --bind / "$CHROOTFS"

echo -e "\e[0;36mMount bind the main module, prepare the chroot.\033[0m"
# Mount the directories, prepare the chroot
unionfs-fuse -o nonempty -o allow_other,suid,dev -o cow $WRITE=RW:/=RO "$UNION" 2> /dev/null
if [ $? -eq 0 ]; then 
echo -e "\e[0;32mOK\033[0m"
sleep 1
else
echo -e "\e[0;31mSorry, something went wrong, exiting...\033[0m"
rmdir "$UNION"
rmdir "$WRITE"
read -s -n 1 -p "Press any key to close . . ."
exit 0
fi

mount --bind /proc "$UNION"/proc
#mount --bind /tmp "$UNION"/tmp
mount --bind /dev "$UNION"/dev
mount --bind /sys "$UNION"/sys
mount -t devpts devpts "$UNION"/dev/pts

chroot "$UNION" /bin/bash -c install_aufs

    if [ ! -f "$UNION/exit_" ]; then
KERN=$(ls $WRITE/lib/modules)
KERNDIR=$KERN-$RANDOM
mkdir -p $WORK/k-$KERNDIR/$KERN
mkdir -p $WORK/k-$KERNDIR/$KERN/boot; mkdir -p $WORK/k-$KERNDIR/$KERN/lib/modules
mv $WRITE/boot/vmlinuz-$KERN $WORK/k-$KERNDIR/vmlinuz1
mv $WRITE/boot/config-$KERN $WORK/k-$KERNDIR/$KERN/boot/
mv $WRITE/lib/modules/$KERN $WORK/k-$KERNDIR/$KERN/lib/modules/
rm -f $WORK/k-$KERNDIR/$KERN/lib/modules/$KERN/build $WORK/k-$KERNDIR/$KERN/lib/modules/$KERN/source
mv $WRITE/tmp/initrd.img $WORK/k-$KERNDIR/
mv $WRITE/tmp/initrd1.xz $WORK/k-$KERNDIR/


#umount -l "$UNION"/tmp 2> /dev/null
umount -l "$UNION"/proc 2> /dev/null
umount -l "$UNION"/dev/pts 2> /dev/null
umount -l "$UNION"/dev 2> /dev/null
umount -l "$UNION"/sys 2> /dev/null
umount -l "$UNION" 2> /dev/null
#umount -l "$CHROOTFS" 2> /dev/null

[ "$?" -ne 0 ] && killall unionfs-fuse 2> /dev/null; echo "Forced unmounting of $UNION"
rmdir "$UNION" 2> /dev/null
#rmdir "$CHROOTFS" 2> /dev/null
(cd $WRITE) && rm -fr $WRITE

#mksquashfs /tmp/k-$KERNDIR/$KERN /tmp/k-$KERNDIR/k-$KERN.squashfs

echo "Creating module..."
(
script -q -c "stty rows 40 cols 100; mksquashfs $WORK/k-$KERNDIR/$KERN $WORK/k-$KERNDIR/k-$KERN.squashfs" |while read -n 250 LINE ; do
A="$(echo $LINE | grep 'Parallel mksquashfs')"
[ -n "$A" ] && B=$A
C="$(echo $LINE | grep 'Creating 4.0 filesystem')"
[ -n "$C" ] && D=$(echo $C | sed 's@.*/@@')

echo "XXX"
echo "$B"
echo "\\n"
echo "Creating 4.0 filesystem on $D" 
echo "\\n"
echo "Please Wait. . ."
echo "\\n"
echo "Close this Window to Cancel processing."
echo "XXX"
echo $LINE | busybox strings |egrep '[0-9]\%'| cut -f1 -d% |awk '{print $NF}'|grep -v '\.' ;done &
) | Xdialog --title "Creating k-$KERN.squashfs . . . " --gauge "Creating k-$KERN.squashfs. Please Wait..." 12 100 0
ret=$?

if [ $ret -ne 0 ]; then
SQUASHPID=$(ps -eo pid,cmd | grep -v grep | grep "mksquashfs $WORK/k-$KERNDIR/$KERN" | awk '{ print $1 }')
echo $SQUASHPID
kill $SQUASHPID
CANC=yes
fi

rm -fr $WORK/k-$KERNDIR/$KERN

if [ "$CANC" = "" ]; then
yad --title=Ready --center --width=550 --text="  The files are ready in: \n  <b>$WORK/k-$KERNDIR/</b> , \n  Copy these to the frugal install 'live' folder \n  to reboot with the new kernel  " --button="gtk-close:0"
else
yad --title=Canceled --center --width=550 --text="  Creating Squashfs module has been canceled \n  Or something went wrong  " --button="gtk-close:0"
fi
    else
 #umount -l "$UNION"/tmp 2> /dev/null
umount -l "$UNION"/proc 2> /dev/null
umount -l "$UNION"/dev/pts 2> /dev/null
umount -l "$UNION"/dev 2> /dev/null
umount -l "$UNION"/sys 2> /dev/null
umount -l "$UNION" 2> /dev/null
#umount -l "$CHROOTFS" 2> /dev/null

[ "$?" -ne 0 ] && killall unionfs-fuse 2> /dev/null; echo "Forced unmounting of $UNION"
rmdir "$UNION" 2> /dev/null
rmdir "$UNION" 2> /dev/null
#rmdir "$CHROOTFS" 2> /dev/null
(cd $WRITE) && rm -fr $WRITE
    fi

